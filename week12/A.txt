FIND(1)                              General Commands Manual                              FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This  manual page documents the GNU version of find.  GNU find searches the directory tree
       rooted at each given starting-point by evaluating the given expression from left to right,
       according  to  the rules of precedence (see section OPERATORS), until the outcome is known
       (the left hand side is false for and operations, true for or), at which point  find  moves
       on to the next file name.  If no starting-point is specified, `.' is assumed.

       If  you  are  using find in an environment where security is important (for example if you
       are using it to search directories that are writable by other users), you should read  the
       `Security  Considerations' chapter of the findutils documentation, which is called Finding
       Files and comes with findutils.   That document also includes a lot more detail  and  dis‐
       cussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments
       following these are taken to be names of files or directories to be examined,  up  to  the
       first  argument  that  begins with `-', or the argument `(' or `!'.  That argument and any
       following arguments are taken to be the expression describing what is to be searched  for.
       If  no  paths  are  given,  the current directory is used.  If no expression is given, the
       expression -print is used (but you should probably consider using  -print0  instead,  any‐
       way).

       This  manual page talks about `options' within the expression list.  These options control
       the behaviour of find but are specified immediately after the last path  name.   The  five
       `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A
       double dash -- can also be used to signal that any remaining  arguments  are  not  options
       (though ensuring that all start points begin with either `./' or `/' is generally safer if
       you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or
              prints  information  a  file, and the file is a symbolic link, the information used
              shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about  files,  the
              information  used  shall be taken from the properties of the file to which the link
              points, not from the link itself (unless it is a broken symbolic link  or  find  is
              unable  to  examine the file to which the link points).  Use of this option implies
              -noleaf.  If you later use the -P option, -noleaf will still be in effect.   If  -L
              is  in  effect  and  find  discovers  a  symbolic link to a subdirectory during its
              search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against  the
              type of the file that a symbolic link points to rather than the link itself (unless
              the symbolic link is broken).  Actions that can cause symbolic links to become bro‐
              ken while find is executing (for example -delete) can give rise to confusing behav‐
              iour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command  line  arguments.
              When find examines or prints information about files, the information used shall be
              taken from the properties of the symbolic link itself.   The only exception to this
              behaviour  is when a file specified on the command line is a symbolic link, and the
              link can be resolved.  For that situation, the information used is taken from what‐
              ever the link points to (that is, the link is followed).  The information about the
              link itself is used as a fallback if the file pointed to by the symbolic link  can‐
              not  be examined.  If -H is in effect and one of the paths specified on the command
              line is a symbolic link to a directory, the contents  of  that  directory  will  be
              examined (though of course -maxdepth 0 would prevent this).

       If  more  than  one of -H, -L and -P is specified, each overrides the others; the last one
       appearing on the command line takes effect.  Since it is the default, the -P option should
       be considered to be in effect unless either -H or -L is specified.

       GNU  find  frequently stats files during the processing of the command line itself, before
       any searching has begun.  These options also affect how  those  arguments  are  processed.
       Specifically,  there  are  a number of tests that compare files listed on the command line
       against a file we are currently considering.  In each case, the file specified on the com‐
       mand line will have been examined and some of its properties will have been saved.  If the
       named file is in fact a symbolic link, and the -P option is in effect (or  if  neither  -H
       nor  -L  were  specified),  the information used for the comparison will be taken from the
       properties of the symbolic link.  Otherwise, it will be taken from the properties  of  the
       file  the  link  points  to.   If  find cannot follow the link (for example because it has
       insufficient privileges or the link points to a nonexistent file) the  properties  of  the
       link itself will be used.

       When  the  -H  or  -L  options are in effect, any symbolic links listed as the argument of
       -newer will be dereferenced, and the timestamp will be taken from the file  to  which  the
       symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The  -follow  option has a similar effect to -L, though it takes effect at the point where
       it appears (that is, if -L is not used but -follow is, any symbolic links appearing  after
       -follow on the command line will be dereferenced, and those before it will not).

       -D debugopts
              Print  diagnostic  information;  this  can be helpful to diagnose problems with why
              find is not doing what you want.  The list of debug options should be  comma  sepa‐
              rated.   Compatibility  of  the debug options is not guaranteed between releases of
              findutils.  For a complete list of valid debug options, see the output of  find  -D
              help.  Valid debug options include

              exec   Show diagnostic information relating to -exec, -execdir, -ok and -okdir

              help   Explain the debugging options.

              opt    Prints diagnostic information relating to the optimisation of the expression
                     tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

              search Navigate the directory tree verbosely.

              stat   Print messages as files are examined with the stat and lstat  system  calls.
                     The find program tries to minimise such calls.

              tree   Show the expression tree in its original and optimised form.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution
              while preserving the overall effect; that is, predicates with side effects are  not
              reordered relative to each other.  The optimisations performed at each optimisation
              level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds  to  the  traditional
                     behaviour.   Expressions are reordered so that tests based only on the names
                     of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based  only  on  the
                     names  of  files,  but  before  any  tests that require information from the
                     inode.  On many modern versions of Unix, file types are  returned  by  read‐
                     dir()  and  so these predicates are faster to evaluate than predicates which
                     need to stat the file first.  If you use the -fstype FOO predicate and spec‐
                     ify  a  filesystem  type  FOO  which  is  not  known  (that  is,  present in
                     `/etc/mtab') at the time  find  starts,  that  predicate  is  equivalent  to
                     -false.

              3      At  this optimisation level, the full cost-based query optimiser is enabled.
                     The order of tests is modified so that cheap (i.e. fast) tests are performed
                     first  and  more  expensive  ones are performed later, if necessary.  Within
                     each cost band, predicates are  evaluated  earlier  or  later  according  to
                     whether  they  are  likely  to succeed or not.  For -o, predicates which are
                     likely to succeed are evaluated earlier, and for -a,  predicates  which  are
                     likely to fail are evaluated earlier.

              The  cost-based  optimiser has a fixed idea of how likely any given test is to suc‐
              ceed.  In some cases the probability takes account of the specific  nature  of  the
              test  (for  example, -type f is assumed to be more likely to succeed than -type c).
              The cost-based optimiser is currently being evaluated.   If it  does  not  actually
              improve  the  performance of find, it will be removed again.  Conversely, optimisa‐
              tions that prove to be reliable, robust and effective may be enabled at lower opti‐
              misation levels over time.  However, the default behaviour (i.e. optimisation level
              1) will not be changed in the 4.3.x release series.  The findutils test suite  runs
              all the tests on find at each optimisation level and ensures that the result is the
              same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is
       a  kind of query specification describing how we match files and what we do with the files
       that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file
              we are considering.  The -empty test for example is true only when the current file
              is empty.

       Actions
              Actions have side effects (such as printing something on the standard  output)  and
              return  either  true or false, usually based on whether or not they are successful.
              The -print action for example prints the name of the current file on  the  standard
              output.

       Global options
              Global  options  affect the operation of tests and actions specified on any part of
              the command line.  Global options always return true.  The -depth option for  exam‐
              ple makes find traverse the file system in a depth-first order.

       Positional options
              Positional  options  affect  only  tests  or actions which follow them.  Positional
              options always return true.  The -regextype option for example is positional, spec‐
              ifying  the  regular  expression dialect for regular expressions occurring later on
              the command line.

       Operators
              Operators join together the other items within the expression.   They  include  for
              example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is
              missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print,  -print  is  per‐
       formed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the com‐
       mand line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the begin‐
              ning  of today rather than from 24 hours ago.  This option only affects tests which
              appear later on the command line.

       -follow
              Deprecated; use the  -L  option  instead.   Dereference  symbolic  links.   Implies
              -noleaf.   The -follow option affects only those tests which appear after it on the
              command line.  Unless the -H or -L option has been specified, the position  of  the
              -follow  option  changes the behaviour of the -newer predicate; any files listed as
              the argument of -newer will be dereferenced if they are symbolic links.   The  same
              consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type pred‐
              icate will always match against the type of the file that a symbolic link points to
              rather  than  the  link itself.  Using -follow causes the -lname and -ilname predi‐
              cates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests  which
              occur  later on the command line.  To see which regular expression types are known,
              use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning
              of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn  warning  messages  on  or off.  These warnings apply only to the command line
              usage, not to any conditions that find might encounter when  it  searches  directo‐
              ries.   The  default behaviour corresponds to -warn if standard input is a tty, and
              to -nowarn otherwise.  If a warning message relating to command-line usage is  pro‐
              duced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment
              variable is set, and -warn is also used, it is not specified which, if  any,  warn‐
              ings will be active.

   GLOBAL OPTIONS
       Global  options always return true.  Global options take effect even for tests which occur
       earlier on the command line.  To prevent confusion, global options should specified on the
       command-line after the list of start points, just before the first test, positional option
       or action. If you specify a global option in some other place, find will issue  a  warning
       message explaining that this can be confusing.

       The  global  options occur after the list of start points, and so are not the same kind of
       option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete  action
              also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally,  find  will  emit  an error message when it fails to stat a file.  If you
              give this option and a file is deleted between the time find reads the name of  the
              file  from  the  directory and the time it tries to stat the file, no error message
              will be issued.    This also applies to files or directories whose names are  given
              on  the  command  line.   This  option takes effect at the time the command line is
              read, which means that you cannot search one  part  of  the  filesystem  with  this
              option  on  and  part  of it with this option off (if you need to do that, you will
              need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels  of  directories  below  the
              starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do  not apply any tests or actions at levels less than levels (a non-negative inte‐
              ger).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for  -xdev,  for
              compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do  not  optimize  by assuming that directories contain 2 fewer subdirectories than
              their hard link count.  This option is needed when searching  filesystems  that  do
              not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems
              or AFS volume mount points.  Each directory on a  normal  Unix  filesystem  has  at
              least  2 hard links: its name and its `.'  entry.  Additionally, its subdirectories
              (if any) each have a `..' entry linked to that directory.  When find is examining a
              directory,  after  it  has statted 2 fewer subdirectories than the directory's link
              count, it knows that the rest of the entries in the directory  are  non-directories
              (`leaf'  files  in  the directory tree).  If only the files' names need to be exam‐
              ined, there is no need to stat them; this gives a significant  increase  in  search
              speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some  tests,  for  example  -newerXY and -samefile, allow comparison between the file cur‐
       rently being examined and some reference file specified on the command line.   When  these
       tests  are used, the interpretation of the reference file is determined by the options -H,
       -L and -P and any previous -follow, but the reference file is only examined once,  at  the
       time  the  command line is parsed.  If the reference file cannot be examined (for example,
       the stat(2) system call fails for it), an error message is issued, and find exits  with  a
       nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic
              link and the -H option or the -L option is in effect, the access time of  the  file
              it points to is always used.

       -atime n
              File  was  last  accessed  n*24  hours ago.  When find figures out how many 24-hour
              periods ago the file was last accessed, any fractional part is ignored, so to match
              -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's  status was last changed more recently than file was modified.  If file is a
              symbolic link and the -H option or the -L option is in  effect,  the  status-change
              time of the file it points to is always used.

       -ctime n
              File's  status  was  last  changed  n*24 hours ago.  See the comments for -atime to
              understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a  file
              name  resolution  sense).   This  takes into account access control lists and other
              permissions artefacts which the -perm test ignores.  This test  makes  use  of  the
              access(2) system call, and so can be fooled by NFS servers which do UID mapping (or
              root-squashing), since many systems implement access(2) in the client's kernel  and
              so cannot make use of the UID mapping information held on the server.  Because this
              test is based only on the result of the access(2) system call, there is no  guaran‐
              tee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File  is  on a filesystem of type type.  The valid filesystem types vary among dif‐
              ferent versions of Unix; an incomplete list of filesystem types that  are  accepted
              on  some  version  of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.
              You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option  or  the  -follow
              option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and
              `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The  pattern  `*foo*`
              will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n hard links.

       -lname pattern
              File  is a symbolic link whose contents match shell pattern pattern.  The metachar‐
              acters do not treat `/' or `.' specially.  If the -L option or the  -follow  option
              is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's  data  was  last  modified  n*24  hours ago.  See the comments for -atime to
              understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading  directories  removed)  matches  shell
              pattern  pattern.  Because the leading directories are removed, the file names con‐
              sidered for a match with -name will never include a  slash,  so  `-name  a/b'  will
              never match anything (you probably need to use -path instead).  A warning is issued
              if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The
              metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this
              is a change in findutils-4.2.2;  see  section  STANDARDS  CONFORMANCE  below).   To
              ignore  a  directory  and  the  files  under  it, use -prune; see an example in the
              description of -path.  Braces are not recognised as being special, despite the fact
              that  some  shells including Bash imbue braces with a special meaning in shell pat‐
              terns.  The filename matching is performed with the use of the  fnmatch(3)  library
              function.    Don't  forget  to enclose the pattern in quotes in order to protect it
              from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and  the  -H
              option  or  the -L option is in effect, the modification time of the file it points
              to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp  Y  of
              the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference
              B   The birth time of the file reference

              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some com‐
              binations are not implemented on all systems; for example B is not supported on all
              systems.   If  an  invalid  or  unsupported combination of XY is specified, a fatal
              error results.  Time specifications are interpreted as for the argument to  the  -d
              option  of GNU date.  If you try to use the birth time of a reference file, and the
              birth time cannot be determined, a fatal error message results.  If you  specify  a
              test  which  refers  to the birth time of files being examined, this test will fail
              for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not  treat  `/'  or
              `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore
              a whole directory tree, use -prune rather than checking every  file  in  the  tree.
              For  example, to skip the directory `src/emacs' and all files and directories under
              it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from  one
              of  the start points named on the command line.  It would only make sense to use an
              absolute path name here if the relevant start point is also an absolute path.  This
              means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the
              base name of the file it's examining.  Since the concatenation will never end  with
              a  slash,  -path  arguments  ending in a slash will match nothing (except perhaps a
              start point specified on the command line).  The predicate -path is also  supported
              by HP-UX find and is part of the POSIX 2008 standard.

       -perm mode
              File's  permission bits are exactly mode (octal or symbolic).  Since an exact match
              is required, if you want to use this form for symbolic modes, you may have to spec‐
              ify  a  rather  complex mode string.  For example `-perm g=w' will only match files
              which have mode 0020 (that is, ones for which group write permission  is  the  only
              permission set).  It is more likely that you will want to use the `/' or `-' forms,
              for example `-perm -g=w', which matches any file with group write permission.   See
              the EXAMPLES section for some illustrative examples.

       -perm -mode
              All  of the permission bits mode are set for the file.  Symbolic modes are accepted
              in this form, and this is usually the way in which you would want to use them.  You
              must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section
              for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are  accepted
              in  this  form.   You must specify `u', `g' or `o' if you use a symbolic mode.  See
              the EXAMPLES section for some illustrative examples.  If no permission bits in mode
              are set, this test matches any file (the idea here is to be consistent with the be‐
              haviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm  /mode
              instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and
              other permissions artefacts which the -perm test ignores.  This test makes  use  of
              the access(2) system call, and so can be fooled by NFS servers which do UID mapping
              (or root-squashing), since many systems implement access(2) in the client's  kernel
              and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File  name  matches regular expression pattern.  This is a match on the whole path,
              not a search.  For example, to match a file named `./fubar3', you can use the regu‐
              lar  expression  `.*bar.'  or  `.*b.*3',  but not `f.*r3'.  The regular expressions
              understood by find are by default  Emacs  Regular  Expressions,  but  this  can  be
              changed with the -regextype option.

       -samefile name
              File  refers  to  the  same inode as name.   When -L is in effect, this can include
              symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kibibytes (KiB, units of 1024 bytes)

              `M'    for Mebibytes (MiB, units of 1024 * 1024 = 1048576 bytes)

              `G'    for Gibibytes (GiB, units of 1024 * 1024 * 1024 = 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in  sparse  files
              that are not actually allocated.  Bear in mind that the `%k' and `%b' format speci‐
              fiers of -printf handle sparse files differently.  The `b'  suffix  always  denotes
              512-byte  blocks and never 1024-byte blocks, which is different to the behaviour of
              -ls.

              The + and - prefixes signify greater than and less than, as usual; i.e.,  an  exact
              size  of  n  units does not match.  Bear in mind that the size is rounded up to the
              next unit. Therefore -size -1M is not equivalent to -size  -1048576c.   The  former
              only matches empty files, the latter matches files from 0 to 1,048,575 bytes.

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic  link; this is never true if the -L option or the -follow option is
                     in effect, unless the symbolic link is broken.  If you want  to  search  for
                     symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

              To  search for more than one type at once, you can supply the combined list of type
              letters separated by a comma `,' (GNU extension).

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and
              other  permissions  artefacts which the -perm test ignores.  This test makes use of
              the access(2) system call, and so can be fooled by NFS servers which do UID mapping
              (or  root-squashing), since many systems implement access(2) in the client's kernel
              and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links:  if  the
              -H  or  -P option was specified, true if the file is a link to a file of type c; if
              the -L option has been given, true if c is  `l'.   In  other  words,  for  symbolic
              links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete  files;  true if removal succeeded.  If the removal failed, an error message
              is issued.  If -delete fails, find's exit status will be nonzero (when  it  eventu‐
              ally exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so
              putting -delete first will make find try to delete everything  below  the  starting
              points  you  specified.   When testing a find command line that you later intend to
              use with -delete, you should explicitly specify -depth in order to avoid later sur‐
              prises.  Because -delete implies -depth, you cannot usefully use -prune and -delete
              together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are
              taken to be arguments to the command until an argument consisting of `;' is encoun‐
              tered.  The string `{}' is replaced by the current file name being processed every‐
              where  it occurs in the arguments to the command, not just in arguments where it is
              alone, as in some versions of find.  Both of these constructions might need  to  be
              escaped  (with  a  `\') or quoted to protect them from expansion by the shell.  See
              the EXAMPLES section for examples of the use of the -exec  option.   The  specified
              command is run once for each matched file.  The command is executed in the starting
              directory.   There are unavoidable security problems surrounding use of  the  -exec
              action; you should use the -execdir option instead.

       -exec command {} +
              This  variant of the -exec action runs the specified command on the selected files,
              but the command line is built by appending each selected file name at the end;  the
              total  number  of  invocations  of the command will be much less than the number of
              matched files.  The command line is built in much the same way  that  xargs  builds
              its  command  lines.   Only one instance of `{}' is allowed within the command, and
              (when find is being invoked from a shell) it should be quoted (for  example,  '{}')
              to protect it from interpretation by shells.  The command is executed in the start‐
              ing directory.  If any invocation returns a non-zero value  as  exit  status,  then
              find  returns  a non-zero exit status.  If find encounters an error, this can some‐
              times cause an immediate exit, so some pending commands may  not  be  run  at  all.
              This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like  -exec,  but the specified command is run from the subdirectory containing the
              matched file, which is not normally the directory in which you  started  find.   As
              with  -exec, the {} should be quoted if find is being invoked from a shell.  This a
              much more secure method for invoking commands, as it avoids race conditions  during
              resolution  of  the  paths to the matched files.  As with the -exec action, the `+'
              form of -execdir will build a command line to process more than one  matched  file,
              but  any  given  invocation  of command will only list files that exist in the same
              subdirectory.  If you use this option, you must ensure that your $PATH  environment
              variable  does  not reference `.'; otherwise, an attacker can run any commands they
              like by leaving an appropriately-named file in a directory in which  you  will  run
              -execdir.  The same applies to having entries in $PATH which are empty or which are
              not absolute directory names.  If any invocation returns a non-zero value  as  exit
              status,  then  find  returns  a non-zero exit status.  If find encounters an error,
              this can sometimes cause an immediate exit, so some pending commands may not be run
              at all. The result of the action depends on whether the + or the ; variant is being
              used; -execdir command {} + always  returns  true,  while  -execdir  command  {}  ;
              returns true only if command returns 0.

       -fls file
              True;  like -ls but write to file like -fprint.  The output file is always created,
              even if the predicate is never matched.  See  the  UNUSUAL  FILENAMES  section  for
              information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is
              run, it is created; if it does exist, it is truncated.  The file  names  `/dev/std‐
              out' and `/dev/stderr' are handled specially; they refer to the standard output and
              standard error output, respectively.  The output file is always  created,  even  if
              the  predicate is never matched.  See the UNUSUAL FILENAMES section for information
              about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always  cre‐
              ated,  even  if  the predicate is never matched.  See the UNUSUAL FILENAMES section
              for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always  cre‐
              ated,  even  if  the predicate is never matched.  See the UNUSUAL FILENAMES section
              for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.   The  block  counts
              are  of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which
              case 512-byte blocks are used.  See the UNUSUAL FILENAMES section  for  information
              about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise
              just return false.  If the command is run, its standard input  is  redirected  from
              /dev/null.

              The  response  to  the  prompt  is matched against a pair of regular expressions to
              determine if it is an affirmative or negative response.  This regular expression is
              obtained  from  the system if the `POSIXLY_CORRECT' environment variable is set, or
              otherwise from find's message translations.  If the system has no suitable  defini‐
              tion,  find's  own definition will be used.   In either case, the interpretation of
              the regular expression  itself  will  be  affected  by  the  environment  variables
              'LC_CTYPE'  (character  classes) and 'LC_COLLATE' (character ranges and equivalence
              classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user  does
              not  agree,  just return false.  If the command is run, its standard input is redi‐
              rected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.    If
              you  are  piping  the output of find into another program and there is the faintest
              possibility that the files which you are searching for  might  contain  a  newline,
              then you should seriously consider using the -print0 option instead of -print.  See
              the UNUSUAL FILENAMES section for information about how unusual characters in file‐
              names are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character
              (instead of the newline character that -print uses).  This allows file  names  that
              contain  newlines or other types of white space to be correctly interpreted by pro‐
              grams that process the find output.  This option corresponds to the  -0  option  of
              xargs.

       -printf format
              True;  print format on the standard output, interpreting `\' escapes and `%' direc‐
              tives.  Field widths and precisions can be specified as with the `printf'  C  func‐
              tion.   Please  note  that many of the fields are printed as %s rather than %d, and
              this may mean that flags don't work as you might expect.  This also means that  the
              `-'  flag  does work (it forces fields to be left-aligned).  Unlike -print, -printf
              does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an  ordinary  charac‐
              ter, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or
                     a directive for the C `strftime' function.  The possible values  for  k  are
                     listed  below;  some  of  them might not be available on all systems, due to
                     differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss.xxxxxxxxxx)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.
                            This  is  a GNU extension.  The time is given in the current timezone
                            (which may be affected by setting the TZ environment variable).   The
                            seconds field includes a fractional part.

                     X      locale's  time  representation (H:M:S).  The seconds field includes a
                            fractional part.

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is
                            the  same  as for ctime(3) and so to preserve compatibility with that
                            format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since  disk
                     space is allocated in multiples of the filesystem block size this is usually
                     greater than %s/512, but it can also be smaller if  the  file  is  a  sparse
                     file.

              %c     File's last status change time in the format returned by the C `ctime' func‐
                     tion.

              %Ck    File's last status change time in the format specified by k,  which  is  the
                     same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The  device  number  on  which  the  file exists (the st_dev field of struct
                     stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the  file
                     name contains no slashes (since it is in the current directory) the %h spec‐
                     ifier expands to `.'.

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk  space
                     is  allocated  in  multiples  of  the  filesystem block size this is usually
                     greater than %s/1024, but it can also be smaller if the  file  is  a  sparse
                     file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's  permission bits (in octal).  This option uses the `traditional' num‐
                     bers which most Unix implementations use, but if your particular implementa‐
                     tion uses an unusual ordering of octal permissions bits, you will see a dif‐
                     ference between the actual value of the file's mode and the  output  of  %m.
                     Normally  you  will  want  to  have a leading zero on this number, and to do
                     this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This  directive  is  sup‐
                     ported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's  name  with  the  name of the starting-point under which it was found
                     removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks  /  st_size).
                     The  exact  value  you  will get for an ordinary file of a certain length is
                     system-dependent.  However, normally sparse files will have values less than
                     1.0,  and  files which use indirect blocks may have a value which is greater
                     than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually
                     512  bytes.    If the file size is zero, the value printed is undefined.  On
                     systems which lack support for st_blocks, a file's sparseness is assumed  to
                     be 1.0.

              %t     File's  last modification time in the format returned by the C `ctime' func‐
                     tion.

              %Tk    File's last modification time in the format specified by  k,  which  is  the
                     same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other charac‐
              ter is printed (don't rely on this, as further  format  characters  may  be  intro‐
              duced).   A  `%' at the end of the format argument causes undefined behaviour since
              there is no following character.  In some locales, it  may  hide  your  door  keys,
              while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do
              not, even if they print numbers.  Numeric directives  that  do  not  support  these
              flags  include  G,  U, b, D, k and n.  The `-' format flag is supported and changes
              the alignment of a field from right-justified (which is the default) to left-justi‐
              fied.

              See  the  UNUSUAL FILENAMES section for information about how unusual characters in
              filenames are handled.

       -prune True; if the file is a directory, do not descend into  it.   If  -depth  is  given,
              false;  no  effect.  Because -delete implies -depth, you cannot usefully use -prune
              and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths spec‐
              ified  on  the command line will be processed.  For example, find /tmp/foo /tmp/bar
              -print -quit will print only /tmp/foo.  Any command lines which have been built  up
              with  -execdir ... {} + will be invoked before find exits.   The exit status may or
              may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell,  you  will  normally
              need  to  quote them.  Many of the examples in this manual page use backslashes for
              this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character  will  also  usually  need  protection  from
              interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two  expressions  in  a row are taken to be joined with an implied -a; expr2 is not
              evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is  discarded;
              the  value of the list is the value of expr2.  The comma operator can be useful for
              searching for several different types of thing, but traversing the filesystem hier‐
              archy only once.  The -fprintf action can be used to list the various matched items
              into several different output files.

       Please note that -a when specified implicitly (for example by two tests appearing  without
       an  explicit  operator  between  them)  or explicitly has higher precedence than -o.  This
       means that find . -name afile -o -name bfile -print will never print afile.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the  control  of
       other  users.   This  includes  file  names, sizes, modification times and so forth.  File
       names are a potential problem since they can contain any character except  `\0'  and  `/'.
       Unusual  characters  in  file names can do unexpected and often undesirable things to your
       terminal (for example, changing the settings of your function  keys  on  some  terminals).
       Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a termi‐
              nal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash,  and  double  quote
              characters  are  printed  using  C-style  escaping (for example `\f', `\"').  Other
              unusual characters are printed using an octal escape.  Other  printable  characters
              (for  -ls and -fls these are the characters between octal 041 and 0176) are printed
              as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it  is  printed  as-is.   Otherwise,  the
              result  depends  on  which directive is in use.  The directives %D, %F, %g, %G, %H,
              %Y, and %y expand to values which are not under control of files'  owners,  and  so
              are  printed  as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u
              and %U have values which are under the control of files' owners but which cannot be
              used  to  send arbitrary data to the terminal, and so these are printed as-is.  The
              directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same
              way  as for GNU ls.  This is not the same quoting mechanism as the one used for -ls
              and -fls.  If you are able to decide what format to use for the output of find then
              it  is  normally  better  to  use `\0' as a terminator than to use newline, as file
              names can  contain  white  space  and  newline  characters.   The  setting  of  the
              `LC_CTYPE'  environment  variable  is used to determine which characters need to be
              quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you  are  using
              find  in  a  script  or in a situation where the matched files might have arbitrary
              names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a  future
       release.

STANDARDS CONFORMANCE
       For  closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environ‐
       ment variable.  The following options are  specified  in  the  POSIX  standard  (IEEE  Std
       1003.1-2008, 2016 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of
              the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharac‐
              ters  (`*',  `?'  or  `[]' for example) will match a leading `.', because IEEE PASC
              interpretation 126 requires this.   This is a  change  from  previous  versions  of
              findutils.

       -type  Supported.    POSIX  specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also
              supports `D', representing a Door, where the OS provides these.   Furthermore,  GNU
              find allows multiple types to be specified at once in a comma-separated list.

       -ok    Supported.   Interpretation of the response is according to the `yes' and `no' pat‐
              terns selected  by  setting  the  `LC_MESSAGES'  environment  variable.   When  the
              `POSIXLY_CORRECT'  environment  variable  is set, these patterns are taken system's
              definition of a positive (yes) or negative (no) response.  See the  system's  docu‐
              mentation   for   nl_langinfo(3),   in   particular  YESEXPR  and  NOEXPR.     When
              `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's  own  mes‐
              sage catalogue.

       -newer Supported.   If  the  file specified is a symbolic link, it is always dereferenced.
              This is a change from previous behaviour, which used to take the relevant time from
              the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode argu‐
              ments (for example +a+x) which are not valid in POSIX are supported  for  backward-
              compatibility.

       Other primaries
              The  primaries  -atime,  -ctime,  -depth,  -exec, -group, -links, -mtime, -nogroup,
              -nouser, -ok, -path, -print, -prune, -size, -user and -xdev are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and  the  `and'  and  `or'
       operators ( -a, -o).

       All  other  options,  predicates, expressions and so forth are extensions beyond the POSIX
       standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a  previously  vis‐
              ited  directory  that is an ancestor of the last file encountered.  When it detects
              an infinite loop, find shall write a diagnostic message to standard error and shall
              either recover its position in the hierarchy or terminate.

       GNU  find  complies  with these requirements.  The link count of directories which contain
       entries which are hard links to an ancestor will often be lower than they otherwise should
       be.   This can mean that GNU find will sometimes optimise away the visiting of a subdirec‐
       tory which is actually a link to an ancestor.  Since find does not actually enter  such  a
       subdirectory,  it is allowed to avoid emitting a diagnostic message.  Although this behav‐
       iour may be somewhat confusing, it is unlikely that anybody actually depends on  this  be‐
       haviour.   If  the leaf optimisation has been turned off with -noleaf, the directory entry
       will always be examined and the diagnostic message will be issued where it is appropriate.
       Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or
       the -follow option is in use, a diagnostic message is issued when find encounters  a  loop
       of  symbolic links.  As with loops containing hard links, the leaf optimisation will often
       mean that find knows that it doesn't need to call stat() or chdir() on the symbolic  link,
       so this diagnostic is frequently not necessary.

       The  -d option is supported for compatibility with various BSD systems, but you should use
       the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of  the  -regex  or
       -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides  a  default value for the internationalization variables that are unset or
              null.

       LC_ALL If set to a non-empty string value, override the values of all the  other  interna‐
              tionalization variables.

       LC_COLLATE
              The  POSIX standard specifies that this variable affects the pattern matching to be
              used for the -name option.   GNU find uses the fnmatch(3) library function, and  so
              support  for  `LC_COLLATE'  depends  on  the  system library.    This variable also
              affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable
              selects  the  actual pattern used to interpret the response to -ok, the interpreta‐
              tion of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used  in  regular  expres‐
              sions  and  also  with  the -name test, if the system's fnmatch(3) library function
              supports this.  This variable also affects  the  interpretation  of  any  character
              classes  in  the  regular  expressions used to interpret the response to the prompt
              issued by -ok.  The `LC_CTYPE' environment variable will also affect which  charac‐
              ters  are  considered to be unprintable when filenames are printed; see the section
              UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines  the  locale  to  be  used  for  internationalised  messages.   If   the
              `POSIXLY_CORRECT' environment variable is set, this also determines the interpreta‐
              tion of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched  to  find  the  executables  invoked  by
              -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines  the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks
              are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by
              default,  because  POSIX  requires that apart from the output for -ok, all messages
              printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz
              is  not  a  valid  symbolic mode.  When POSIXLY_CORRECT is set, such constructs are
              treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok  action  is
              interpreted according to the system's message catalogue, as opposed to according to
              find's own message translations.

       TZ     Affects the time zone used for  some  of  the  time-related  format  directives  of
              -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will
       work incorrectly if there are any filenames containing newlines, single or double  quotes,
       or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames
       in such a way that file or directory names containing single or double quotes,  spaces  or
       newlines  are  correctly  handled.  The -name test comes before the -type test in order to
       avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the  braces  are
       enclosed in single quote marks to protect them from interpretation as shell script punctu‐
       ation.  The semicolon is similarly protected by the use  of  a  backslash,  though  single
       quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse   the   filesystem   just   once,  listing  setuid  files  and  directories  into
       /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the  last  twenty-four
       hours.   This command works this way because the time since each file was last modified is
       divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0,  a
       file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search  for  files  which  have  read and write permission for their owner, and group, but
       which other users can read but not write to.  Files which meet  these  criteria  but  have
       other  permissions  bits  set  (for  example  if someone can execute the file) will not be
       matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which
       other  users  can  read,  without regard to the presence of any extra permission bits (for
       example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group,  or  anybody
       else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All  three of these commands do the same thing, but the first one uses the octal represen‐
       tation of the file mode, and the other two use the  symbolic  form.   These  commands  all
       search for files which are writable by either their owner or their group.  The files don't
       have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by  both  their
       owner and their group.

       find . -perm -444 -perm /222 \! -perm /111
       find . -perm -a+r -perm /a+w \! -perm /a+x

       These  two  commands both search for files that are readable for everybody ( -perm -444 or
       -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not  exe‐
       cutable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name '*~' -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directo‐
       ries named .snapshot (and anything in them).  It also omits  files  or  directories  whose
       name  ends  in  ~,  but  not their contents.  The construct -prune -o \( ... -print0 \) is
       quite common.  The idea here is that the expression before -prune matches things which are
       to be pruned.  However, the -prune action itself returns true, so the following -o ensures
       that the right hand side is evaluated only for those directories which didn't  get  pruned
       (the contents of the pruned directories are not even visited, so their contents are irrel‐
       evant).  The expression on the right hand side of the -o is in parentheses only for  clar‐
       ity.   It  emphasises that the -print0 action takes place only for things that didn't have
       -prune applied to them.  Because the default `and'  condition  between  tests  binds  more
       tightly  than  -o,  this  is  the default anyway, but the parentheses help to show what is
       going on.

       find repo/ \( -exec test -d '{}'/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \) \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directo‐
       ries, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In  this  example,  -prune prevents unnecessary descent into directories that have already
       been discovered (for example we do  not  search  project3/src  because  we  already  found
       project3/.svn), but ensures sibling directories (project2 and project3) are found.

       find /tmp -type f,d,l

       Search  for  files,  directories,  and  symbolic links in the directory /tmp passing these
       types as a comma-separated list (GNU extension), which  is  otherwise  equivalent  to  the
       longer, yet more portable:

       find /tmp \( -type f -o -type d -o -type l \)

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors
       occur.   This is deliberately a very broad description, but if the return  value  is  non-
       zero, you should not rely on the correctness of the results of find.

       When  some  error  occurs,  find  may stop immediately, without completing all the actions
       specified.  For example, some starting points may not have been examined or  some  pending
       program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1),  locatedb(5),  updatedb(1),  xargs(1), chmod(1), fnmatch(3), regex(7), stat(2),
       lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info  and  find
       programs are properly installed at your site, the command info find should give you access
       to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used  in  file‐
       name  patterns  will  match  a leading `.', because IEEE POSIX interpretation 126 requires
       this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when
       it  fails.   However,  find will not exit immediately.  Previously, find's exit status was
       unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour  of  -perm  /MODE.   The
       +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
   Operator precedence surprises
       The  command  find . -name afile -o -name bfile -print will never print afile because this
       is actually equivalent to find . -name afile -o \( -name bfile  -a  -print  \).   Remember
       that  the  precedence of -a is higher than that of -o and when there is no operator speci‐
       fied between tests, -a is assumed.

   “paths must precede expression” error message
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D ... [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiv‐
       ing a command line like this:
       find . -name frcode.c locate.c word_io.c -print
       That command is of course not going to work.  Instead of doing things this way, you should
       enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the  POSIX  standard  specifies
       for  find,  which  therefore cannot be fixed.  For example, the -exec action is inherently
       insecure, and -execdir should be used instead.  Please see Finding Files for more informa‐
       tion.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The   best   way   to   report   a   bug   is   to   use   the   form   at   http://savan‐
       nah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be  able  to
       track  progress in fixing the problem.   Other comments about find(1) and about the findu‐
       tils package in general can be sent to the bug-findutils mailing list.  To join the  list,
       send email to bug-findutils-request@gnu.org.

                                                                                          FIND(1)









































































GIT(1)                                      Git Manual                                     GIT(1)

NAME
       git - the stupid content tracker

SYNOPSIS
       git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>]
           <command> [<args>]

DESCRIPTION
       Git is a fast, scalable, distributed revision control system with an unusually rich
       command set that provides both high-level operations and full access to internals.

       See gittutorial(7) to get started, then see giteveryday(7) for a useful minimum set of
       commands. The Git User’s Manual[1] has a more in-depth introduction.

       After you mastered the basic concepts, you can come back to this page to learn what
       commands Git offers. You can learn more about individual Git commands with "git help
       command". gitcli(7) manual page gives you an overview of the command-line command syntax.

       A formatted and hyperlinked copy of the latest Git documentation can be viewed at
       https://git.github.io/htmldocs/git.html.

OPTIONS
       --version
           Prints the Git suite version that the git program came from.

       --help
           Prints the synopsis and a list of the most commonly used commands. If the option --all
           or -a is given then all available commands are printed. If a Git command is named this
           option will bring up the manual page for that command.

           Other options are available to control how the manual page is displayed. See git-
           help(1) for more information, because git --help ...  is converted internally into git
           help ....

       -C <path>
           Run as if git was started in <path> instead of the current working directory. When
           multiple -C options are given, each subsequent non-absolute -C <path> is interpreted
           relative to the preceding -C <path>.

           This option affects options that expect path name like --git-dir and --work-tree in
           that their interpretations of the path names would be made relative to the working
           directory caused by the -C option. For example the following invocations are
           equivalent:

               git --git-dir=a.git --work-tree=b -C c status
               git --git-dir=c/a.git --work-tree=c/b status

       -c <name>=<value>
           Pass a configuration parameter to the command. The value given will override values
           from configuration files. The <name> is expected in the same format as listed by git
           config (subkeys separated by dots).

           Note that omitting the = in git -c foo.bar ...  is allowed and sets foo.bar to the
           boolean true value (just like [foo]bar would in a config file). Including the equals
           but with an empty value (like git -c foo.bar= ...) sets foo.bar to the empty string
           which git config --bool will convert to false.

       --exec-path[=<path>]
           Path to wherever your core Git programs are installed. This can also be controlled by
           setting the GIT_EXEC_PATH environment variable. If no path is given, git will print
           the current setting and then exit.

       --html-path
           Print the path, without trailing slash, where Git’s HTML documentation is installed
           and exit.

       --man-path
           Print the manpath (see man(1)) for the man pages for this version of Git and exit.

       --info-path
           Print the path where the Info files documenting this version of Git are installed and
           exit.

       -p, --paginate
           Pipe all output into less (or if set, $PAGER) if standard output is a terminal. This
           overrides the pager.<cmd> configuration options (see the "Configuration Mechanism"
           section below).

       --no-pager
           Do not pipe Git output into a pager.

       --git-dir=<path>
           Set the path to the repository. This can also be controlled by setting the GIT_DIR
           environment variable. It can be an absolute path or relative path to current working
           directory.

       --work-tree=<path>
           Set the path to the working tree. It can be an absolute path or a path relative to the
           current working directory. This can also be controlled by setting the GIT_WORK_TREE
           environment variable and the core.worktree configuration variable (see core.worktree
           in git-config(1) for a more detailed discussion).

       --namespace=<path>
           Set the Git namespace. See gitnamespaces(7) for more details. Equivalent to setting
           the GIT_NAMESPACE environment variable.

       --super-prefix=<path>
           Currently for internal use only. Set a prefix which gives a path from above a
           repository down to its root. One use is to give submodules context about the
           superproject that invoked it.

       --bare
           Treat the repository as a bare repository. If GIT_DIR environment is not set, it is
           set to the current working directory.

       --no-replace-objects
           Do not use replacement refs to replace Git objects. See git-replace(1) for more
           information.

       --literal-pathspecs
           Treat pathspecs literally (i.e. no globbing, no pathspec magic). This is equivalent to
           setting the GIT_LITERAL_PATHSPECS environment variable to 1.

       --glob-pathspecs
           Add "glob" magic to all pathspec. This is equivalent to setting the GIT_GLOB_PATHSPECS
           environment variable to 1. Disabling globbing on individual pathspecs can be done
           using pathspec magic ":(literal)"

       --noglob-pathspecs
           Add "literal" magic to all pathspec. This is equivalent to setting the
           GIT_NOGLOB_PATHSPECS environment variable to 1. Enabling globbing on individual
           pathspecs can be done using pathspec magic ":(glob)"

       --icase-pathspecs
           Add "icase" magic to all pathspec. This is equivalent to setting the
           GIT_ICASE_PATHSPECS environment variable to 1.

       --no-optional-locks
           Do not perform optional operations that require locks. This is equivalent to setting
           the GIT_OPTIONAL_LOCKS to 0.

GIT COMMANDS
       We divide Git into high level ("porcelain") commands and low level ("plumbing") commands.

HIGH-LEVEL COMMANDS (PORCELAIN)
       We separate the porcelain commands into the main commands and some ancillary user
       utilities.

   Main porcelain commands
       git-add(1)
           Add file contents to the index.

       git-am(1)
           Apply a series of patches from a mailbox.

       git-archive(1)
           Create an archive of files from a named tree.

       git-bisect(1)
           Use binary search to find the commit that introduced a bug.

       git-branch(1)
           List, create, or delete branches.

       git-bundle(1)
           Move objects and refs by archive.

       git-checkout(1)
           Switch branches or restore working tree files.

       git-cherry-pick(1)
           Apply the changes introduced by some existing commits.

       git-citool(1)
           Graphical alternative to git-commit.

       git-clean(1)
           Remove untracked files from the working tree.

       git-clone(1)
           Clone a repository into a new directory.

       git-commit(1)
           Record changes to the repository.

       git-describe(1)
           Give an object a human readable name based on an available ref.

       git-diff(1)
           Show changes between commits, commit and working tree, etc.

       git-fetch(1)
           Download objects and refs from another repository.

       git-format-patch(1)
           Prepare patches for e-mail submission.

       git-gc(1)
           Cleanup unnecessary files and optimize the local repository.

       git-grep(1)
           Print lines matching a pattern.

       git-gui(1)
           A portable graphical interface to Git.

       git-init(1)
           Create an empty Git repository or reinitialize an existing one.

       git-log(1)
           Show commit logs.

       git-merge(1)
           Join two or more development histories together.

       git-mv(1)
           Move or rename a file, a directory, or a symlink.

       git-notes(1)
           Add or inspect object notes.

       git-pull(1)
           Fetch from and integrate with another repository or a local branch.

       git-push(1)
           Update remote refs along with associated objects.

       git-rebase(1)
           Reapply commits on top of another base tip.

       git-reset(1)
           Reset current HEAD to the specified state.

       git-revert(1)
           Revert some existing commits.

       git-rm(1)
           Remove files from the working tree and from the index.

       git-shortlog(1)
           Summarize git log output.

       git-show(1)
           Show various types of objects.

       git-stash(1)
           Stash the changes in a dirty working directory away.

       git-status(1)
           Show the working tree status.

       git-submodule(1)
           Initialize, update or inspect submodules.

       git-tag(1)
           Create, list, delete or verify a tag object signed with GPG.

       git-worktree(1)
           Manage multiple working trees.

       gitk(1)
           The Git repository browser.

   Ancillary Commands
       Manipulators:

       git-config(1)
           Get and set repository or global options.

       git-fast-export(1)
           Git data exporter.

       git-fast-import(1)
           Backend for fast Git data importers.

       git-filter-branch(1)
           Rewrite branches.

       git-mergetool(1)
           Run merge conflict resolution tools to resolve merge conflicts.

       git-pack-refs(1)
           Pack heads and tags for efficient repository access.

       git-prune(1)
           Prune all unreachable objects from the object database.

       git-reflog(1)
           Manage reflog information.

       git-remote(1)
           Manage set of tracked repositories.

       git-repack(1)
           Pack unpacked objects in a repository.

       git-replace(1)
           Create, list, delete refs to replace objects.

       Interrogators:

       git-annotate(1)
           Annotate file lines with commit information.

       git-blame(1)
           Show what revision and author last modified each line of a file.

       git-cherry(1)
           Find commits yet to be applied to upstream.

       git-count-objects(1)
           Count unpacked number of objects and their disk consumption.

       git-difftool(1)
           Show changes using common diff tools.

       git-fsck(1)
           Verifies the connectivity and validity of the objects in the database.

       git-get-tar-commit-id(1)
           Extract commit ID from an archive created using git-archive.

       git-help(1)
           Display help information about Git.

       git-instaweb(1)
           Instantly browse your working repository in gitweb.

       git-merge-tree(1)
           Show three-way merge without touching index.

       git-rerere(1)
           Reuse recorded resolution of conflicted merges.

       git-rev-parse(1)
           Pick out and massage parameters.

       git-show-branch(1)
           Show branches and their commits.

       git-verify-commit(1)
           Check the GPG signature of commits.

       git-verify-tag(1)
           Check the GPG signature of tags.

       git-whatchanged(1)
           Show logs with difference each commit introduces.

       gitweb(1)
           Git web interface (web frontend to Git repositories).

   Interacting with Others
       These commands are to interact with foreign SCM and with other people via patch over
       e-mail.

       git-archimport(1)
           Import an Arch repository into Git.

       git-cvsexportcommit(1)
           Export a single commit to a CVS checkout.

       git-cvsimport(1)
           Salvage your data out of another SCM people love to hate.

       git-cvsserver(1)
           A CVS server emulator for Git.

       git-imap-send(1)
           Send a collection of patches from stdin to an IMAP folder.

       git-p4(1)
           Import from and submit to Perforce repositories.

       git-quiltimport(1)
           Applies a quilt patchset onto the current branch.

       git-request-pull(1)
           Generates a summary of pending changes.

       git-send-email(1)
           Send a collection of patches as emails.

       git-svn(1)
           Bidirectional operation between a Subversion repository and Git.

LOW-LEVEL COMMANDS (PLUMBING)
       Although Git includes its own porcelain layer, its low-level commands are sufficient to
       support development of alternative porcelains. Developers of such porcelains might start
       by reading about git-update-index(1) and git-read-tree(1).

       The interface (input, output, set of options and the semantics) to these low-level
       commands are meant to be a lot more stable than Porcelain level commands, because these
       commands are primarily for scripted use. The interface to Porcelain commands on the other
       hand are subject to change in order to improve the end user experience.

       The following description divides the low-level commands into commands that manipulate
       objects (in the repository, index, and working tree), commands that interrogate and
       compare objects, and commands that move objects and references between repositories.

   Manipulation commands
       git-apply(1)
           Apply a patch to files and/or to the index.

       git-checkout-index(1)
           Copy files from the index to the working tree.

       git-commit-tree(1)
           Create a new commit object.

       git-hash-object(1)
           Compute object ID and optionally creates a blob from a file.

       git-index-pack(1)
           Build pack index file for an existing packed archive.

       git-merge-file(1)
           Run a three-way file merge.

       git-merge-index(1)
           Run a merge for files needing merging.

       git-mktag(1)
           Creates a tag object.

       git-mktree(1)
           Build a tree-object from ls-tree formatted text.

       git-pack-objects(1)
           Create a packed archive of objects.

       git-prune-packed(1)
           Remove extra objects that are already in pack files.

       git-read-tree(1)
           Reads tree information into the index.

       git-symbolic-ref(1)
           Read, modify and delete symbolic refs.

       git-unpack-objects(1)
           Unpack objects from a packed archive.

       git-update-index(1)
           Register file contents in the working tree to the index.

       git-update-ref(1)
           Update the object name stored in a ref safely.

       git-write-tree(1)
           Create a tree object from the current index.

   Interrogation commands
       git-cat-file(1)
           Provide content or type and size information for repository objects.

       git-diff-files(1)
           Compares files in the working tree and the index.

       git-diff-index(1)
           Compare a tree to the working tree or index.

       git-diff-tree(1)
           Compares the content and mode of blobs found via two tree objects.

       git-for-each-ref(1)
           Output information on each ref.

       git-ls-files(1)
           Show information about files in the index and the working tree.

       git-ls-remote(1)
           List references in a remote repository.

       git-ls-tree(1)
           List the contents of a tree object.

       git-merge-base(1)
           Find as good common ancestors as possible for a merge.

       git-name-rev(1)
           Find symbolic names for given revs.

       git-pack-redundant(1)
           Find redundant pack files.

       git-rev-list(1)
           Lists commit objects in reverse chronological order.

       git-show-index(1)
           Show packed archive index.

       git-show-ref(1)
           List references in a local repository.

       git-unpack-file(1)
           Creates a temporary file with a blob’s contents.

       git-var(1)
           Show a Git logical variable.

       git-verify-pack(1)
           Validate packed Git archive files.

       In general, the interrogate commands do not touch the files in the working tree.

   Synching repositories
       git-daemon(1)
           A really simple server for Git repositories.

       git-fetch-pack(1)
           Receive missing objects from another repository.

       git-http-backend(1)
           Server side implementation of Git over HTTP.

       git-send-pack(1)
           Push objects over Git protocol to another repository.

       git-update-server-info(1)
           Update auxiliary info file to help dumb servers.

       The following are helper commands used by the above; end users typically do not use them
       directly.

       git-http-fetch(1)
           Download from a remote Git repository via HTTP.

       git-http-push(1)
           Push objects over HTTP/DAV to another repository.

       git-parse-remote(1)
           Routines to help parsing remote repository access parameters.

       git-receive-pack(1)
           Receive what is pushed into the repository.

       git-shell(1)
           Restricted login shell for Git-only SSH access.

       git-upload-archive(1)
           Send archive back to git-archive.

       git-upload-pack(1)
           Send objects packed back to git-fetch-pack.

   Internal helper commands
       These are internal helper commands used by other commands; end users typically do not use
       them directly.

       git-check-attr(1)
           Display gitattributes information.

       git-check-ignore(1)
           Debug gitignore / exclude files.

       git-check-mailmap(1)
           Show canonical names and email addresses of contacts.

       git-check-ref-format(1)
           Ensures that a reference name is well formed.

       git-column(1)
           Display data in columns.

       git-credential(1)
           Retrieve and store user credentials.

       git-credential-cache(1)
           Helper to temporarily store passwords in memory.

       git-credential-store(1)
           Helper to store credentials on disk.

       git-fmt-merge-msg(1)
           Produce a merge commit message.

       git-interpret-trailers(1)
           add or parse structured information in commit messages.

       git-mailinfo(1)
           Extracts patch and authorship from a single e-mail message.

       git-mailsplit(1)
           Simple UNIX mbox splitter program.

       git-merge-one-file(1)
           The standard helper program to use with git-merge-index.

       git-patch-id(1)
           Compute unique ID for a patch.

       git-sh-i18n(1)
           Git’s i18n setup code for shell scripts.

       git-sh-setup(1)
           Common Git shell script setup code.

       git-stripspace(1)
           Remove unnecessary whitespace.

CONFIGURATION MECHANISM
       Git uses a simple text format to store customizations that are per repository and are per
       user. Such a configuration file may look like this:

           #
           # A '#' or ';' character indicates a comment.
           #

           ; core variables
           [core]
                   ; Don't trust file modes
                   filemode = false

           ; user identity
           [user]
                   name = "Junio C Hamano"
                   email = "gitster@pobox.com"

       Various commands read from the configuration file and adjust their operation accordingly.
       See git-config(1) for a list and more details about the configuration mechanism.

IDENTIFIER TERMINOLOGY
       <object>
           Indicates the object name for any type of object.

       <blob>
           Indicates a blob object name.

       <tree>
           Indicates a tree object name.

       <commit>
           Indicates a commit object name.

       <tree-ish>
           Indicates a tree, commit or tag object name. A command that takes a <tree-ish>
           argument ultimately wants to operate on a <tree> object but automatically dereferences
           <commit> and <tag> objects that point at a <tree>.

       <commit-ish>
           Indicates a commit or tag object name. A command that takes a <commit-ish> argument
           ultimately wants to operate on a <commit> object but automatically dereferences <tag>
           objects that point at a <commit>.

       <type>
           Indicates that an object type is required. Currently one of: blob, tree, commit, or
           tag.

       <file>
           Indicates a filename - almost always relative to the root of the tree structure
           GIT_INDEX_FILE describes.

SYMBOLIC IDENTIFIERS
       Any Git command accepting any <object> can also use the following symbolic notation:

       HEAD
           indicates the head of the current branch.

       <tag>
           a valid tag name (i.e. a refs/tags/<tag> reference).

       <head>
           a valid head name (i.e. a refs/heads/<head> reference).

       For a more complete list of ways to spell object names, see "SPECIFYING REVISIONS" section
       in gitrevisions(7).

FILE/DIRECTORY STRUCTURE
       Please see the gitrepository-layout(5) document.

       Read githooks(5) for more details about each hook.

       Higher level SCMs may provide and manage additional information in the $GIT_DIR.

TERMINOLOGY
       Please see gitglossary(7).

ENVIRONMENT VARIABLES
       Various Git commands use the following environment variables:

   The Git Repository
       These environment variables apply to all core Git commands. Nb: it is worth noting that
       they may be used/overridden by SCMS sitting above Git so take care if using a foreign
       front-end.

       GIT_INDEX_FILE
           This environment allows the specification of an alternate index file. If not
           specified, the default of $GIT_DIR/index is used.

       GIT_INDEX_VERSION
           This environment variable allows the specification of an index version for new
           repositories. It won’t affect existing index files. By default index file version 2 or
           3 is used. See git-update-index(1) for more information.

       GIT_OBJECT_DIRECTORY
           If the object storage directory is specified via this environment variable then the
           sha1 directories are created underneath - otherwise the default $GIT_DIR/objects
           directory is used.

       GIT_ALTERNATE_OBJECT_DIRECTORIES
           Due to the immutable nature of Git objects, old objects can be archived into shared,
           read-only directories. This variable specifies a ":" separated (on Windows ";"
           separated) list of Git object directories which can be used to search for Git objects.
           New objects will not be written to these directories.

               Entries that begin with `"` (double-quote) will be interpreted
               as C-style quoted paths, removing leading and trailing
               double-quotes and respecting backslash escapes. E.g., the value
               `"path-with-\"-and-:-in-it":vanilla-path` has two paths:
               `path-with-"-and-:-in-it` and `vanilla-path`.

       GIT_DIR
           If the GIT_DIR environment variable is set then it specifies a path to use instead of
           the default .git for the base of the repository. The --git-dir command-line option
           also sets this value.

       GIT_WORK_TREE
           Set the path to the root of the working tree. This can also be controlled by the
           --work-tree command-line option and the core.worktree configuration variable.

       GIT_NAMESPACE
           Set the Git namespace; see gitnamespaces(7) for details. The --namespace command-line
           option also sets this value.

       GIT_CEILING_DIRECTORIES
           This should be a colon-separated list of absolute paths. If set, it is a list of
           directories that Git should not chdir up into while looking for a repository directory
           (useful for excluding slow-loading network directories). It will not exclude the
           current working directory or a GIT_DIR set on the command line or in the environment.
           Normally, Git has to read the entries in this list and resolve any symlink that might
           be present in order to compare them with the current directory. However, if even this
           access is slow, you can add an empty entry to the list to tell Git that the subsequent
           entries are not symlinks and needn’t be resolved; e.g.,
           GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink.

       GIT_DISCOVERY_ACROSS_FILESYSTEM
           When run in a directory that does not have ".git" repository directory, Git tries to
           find such a directory in the parent directories to find the top of the working tree,
           but by default it does not cross filesystem boundaries. This environment variable can
           be set to true to tell Git not to stop at filesystem boundaries. Like
           GIT_CEILING_DIRECTORIES, this will not affect an explicit repository directory set via
           GIT_DIR or on the command line.

       GIT_COMMON_DIR
           If this variable is set to a path, non-worktree files that are normally in $GIT_DIR
           will be taken from this path instead. Worktree-specific files such as HEAD or index
           are taken from $GIT_DIR. See gitrepository-layout(5) and git-worktree(1) for details.
           This variable has lower precedence than other path variables such as GIT_INDEX_FILE,
           GIT_OBJECT_DIRECTORY...

   Git Commits
       GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME,
       GIT_COMMITTER_EMAIL, GIT_COMMITTER_DATE, EMAIL
           see git-commit-tree(1)

   Git Diffs
       GIT_DIFF_OPTS
           Only valid setting is "--unified=??" or "-u??" to set the number of context lines
           shown when a unified diff is created. This takes precedence over any "-U" or
           "--unified" option value passed on the Git diff command line.

       GIT_EXTERNAL_DIFF
           When the environment variable GIT_EXTERNAL_DIFF is set, the program named by it is
           called, instead of the diff invocation described above. For a path that is added,
           removed, or modified, GIT_EXTERNAL_DIFF is called with 7 parameters:

               path old-file old-hex old-mode new-file new-hex new-mode

           where:

       <old|new>-file
           are files GIT_EXTERNAL_DIFF can use to read the contents of <old|new>,

       <old|new>-hex
           are the 40-hexdigit SHA-1 hashes,

       <old|new>-mode
           are the octal representation of the file modes.

           The file parameters can point at the user’s working file (e.g.  new-file in
           "git-diff-files"), /dev/null (e.g.  old-file when a new file is added), or a temporary
           file (e.g.  old-file in the index).  GIT_EXTERNAL_DIFF should not worry about
           unlinking the temporary file --- it is removed when GIT_EXTERNAL_DIFF exits.

           For a path that is unmerged, GIT_EXTERNAL_DIFF is called with 1 parameter, <path>.

           For each path GIT_EXTERNAL_DIFF is called, two environment variables,
           GIT_DIFF_PATH_COUNTER and GIT_DIFF_PATH_TOTAL are set.

       GIT_DIFF_PATH_COUNTER
           A 1-based counter incremented by one for every path.

       GIT_DIFF_PATH_TOTAL
           The total number of paths.

   other
       GIT_MERGE_VERBOSITY
           A number controlling the amount of output shown by the recursive merge strategy.
           Overrides merge.verbosity. See git-merge(1)

       GIT_PAGER
           This environment variable overrides $PAGER. If it is set to an empty string or to the
           value "cat", Git will not launch a pager. See also the core.pager option in git-
           config(1).

       GIT_EDITOR
           This environment variable overrides $EDITOR and $VISUAL. It is used by several Git
           commands when, on interactive mode, an editor is to be launched. See also git-var(1)
           and the core.editor option in git-config(1).

       GIT_SSH, GIT_SSH_COMMAND
           If either of these environment variables is set then git fetch and git push will use
           the specified command instead of ssh when they need to connect to a remote system. The
           command-line parameters passed to the configured command are determined by the ssh
           variant. See ssh.variant option in git-config(1) for details.

       + $GIT_SSH_COMMAND takes precedence over $GIT_SSH, and is interpreted by the shell, which
       allows additional arguments to be included. $GIT_SSH on the other hand must be just the
       path to a program (which can be a wrapper shell script, if additional arguments are
       needed).

       + Usually it is easier to configure any desired options through your personal .ssh/config
       file. Please consult your ssh documentation for further details.

       GIT_SSH_VARIANT
           If this environment variable is set, it overrides Git’s autodetection whether
           GIT_SSH/GIT_SSH_COMMAND/core.sshCommand refer to OpenSSH, plink or tortoiseplink. This
           variable overrides the config setting ssh.variant that serves the same purpose.

       GIT_ASKPASS
           If this environment variable is set, then Git commands which need to acquire passwords
           or passphrases (e.g. for HTTP or IMAP authentication) will call this program with a
           suitable prompt as command-line argument and read the password from its STDOUT. See
           also the core.askPass option in git-config(1).

       GIT_TERMINAL_PROMPT
           If this environment variable is set to 0, git will not prompt on the terminal (e.g.,
           when asking for HTTP authentication).

       GIT_CONFIG_NOSYSTEM
           Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file.
           This environment variable can be used along with $HOME and $XDG_CONFIG_HOME to create
           a predictable environment for a picky script, or you can set it temporarily to avoid
           using a buggy /etc/gitconfig file while waiting for someone with sufficient
           permissions to fix it.

       GIT_FLUSH
           If this environment variable is set to "1", then commands such as git blame (in
           incremental mode), git rev-list, git log, git check-attr and git check-ignore will
           force a flush of the output stream after each record have been flushed. If this
           variable is set to "0", the output of these commands will be done using completely
           buffered I/O. If this environment variable is not set, Git will choose buffered or
           record-oriented flushing based on whether stdout appears to be redirected to a file or
           not.

       GIT_TRACE
           Enables general trace messages, e.g. alias expansion, built-in command execution and
           external command execution.

           If this variable is set to "1", "2" or "true" (comparison is case insensitive), trace
           messages will be printed to stderr.

           If the variable is set to an integer value greater than 2 and lower than 10 (strictly)
           then Git will interpret this value as an open file descriptor and will try to write
           the trace messages into this file descriptor.

           Alternatively, if the variable is set to an absolute path (starting with a /
           character), Git will interpret this as a file path and will try to write the trace
           messages into it.

           Unsetting the variable, or setting it to empty, "0" or "false" (case insensitive)
           disables trace messages.

       GIT_TRACE_FSMONITOR
           Enables trace messages for the filesystem monitor extension. See GIT_TRACE for
           available trace output options.

       GIT_TRACE_PACK_ACCESS
           Enables trace messages for all accesses to any packs. For each access, the pack file
           name and an offset in the pack is recorded. This may be helpful for troubleshooting
           some pack-related performance problems. See GIT_TRACE for available trace output
           options.

       GIT_TRACE_PACKET
           Enables trace messages for all packets coming in or out of a given program. This can
           help with debugging object negotiation or other protocol issues. Tracing is turned off
           at a packet starting with "PACK" (but see GIT_TRACE_PACKFILE below). See GIT_TRACE for
           available trace output options.

       GIT_TRACE_PACKFILE
           Enables tracing of packfiles sent or received by a given program. Unlike other trace
           output, this trace is verbatim: no headers, and no quoting of binary data. You almost
           certainly want to direct into a file (e.g., GIT_TRACE_PACKFILE=/tmp/my.pack) rather
           than displaying it on the terminal or mixing it with other trace output.

           Note that this is currently only implemented for the client side of clones and
           fetches.

       GIT_TRACE_PERFORMANCE
           Enables performance related trace messages, e.g. total execution time of each Git
           command. See GIT_TRACE for available trace output options.

       GIT_TRACE_SETUP
           Enables trace messages printing the .git, working tree and current working directory
           after Git has completed its setup phase. See GIT_TRACE for available trace output
           options.

       GIT_TRACE_SHALLOW
           Enables trace messages that can help debugging fetching / cloning of shallow
           repositories. See GIT_TRACE for available trace output options.

       GIT_TRACE_CURL
           Enables a curl full trace dump of all incoming and outgoing data, including
           descriptive information, of the git transport protocol. This is similar to doing curl
           --trace-ascii on the command line. This option overrides setting the GIT_CURL_VERBOSE
           environment variable. See GIT_TRACE for available trace output options.

       GIT_TRACE_CURL_NO_DATA
           When a curl trace is enabled (see GIT_TRACE_CURL above), do not dump data (that is,
           only dump info lines and headers).

       GIT_REDACT_COOKIES
           This can be set to a comma-separated list of strings. When a curl trace is enabled
           (see GIT_TRACE_CURL above), whenever a "Cookies:" header sent by the client is dumped,
           values of cookies whose key is in that list (case-sensitive) are redacted.

       GIT_LITERAL_PATHSPECS
           Setting this variable to 1 will cause Git to treat all pathspecs literally, rather
           than as glob patterns. For example, running GIT_LITERAL_PATHSPECS=1 git log -- '*.c'
           will search for commits that touch the path *.c, not any paths that the glob *.c
           matches. You might want this if you are feeding literal paths to Git (e.g., paths
           previously given to you by git ls-tree, --raw diff output, etc).

       GIT_GLOB_PATHSPECS
           Setting this variable to 1 will cause Git to treat all pathspecs as glob patterns (aka
           "glob" magic).

       GIT_NOGLOB_PATHSPECS
           Setting this variable to 1 will cause Git to treat all pathspecs as literal (aka
           "literal" magic).

       GIT_ICASE_PATHSPECS
           Setting this variable to 1 will cause Git to treat all pathspecs as case-insensitive.

       GIT_REFLOG_ACTION
           When a ref is updated, reflog entries are created to keep track of the reason why the
           ref was updated (which is typically the name of the high-level command that updated
           the ref), in addition to the old and new values of the ref. A scripted Porcelain
           command can use set_reflog_action helper function in git-sh-setup to set its name to
           this variable when it is invoked as the top level command by the end user, to be
           recorded in the body of the reflog.

       GIT_REF_PARANOIA
           If set to 1, include broken or badly named refs when iterating over lists of refs. In
           a normal, non-corrupted repository, this does nothing. However, enabling it may help
           git to detect and abort some operations in the presence of broken refs. Git sets this
           variable automatically when performing destructive operations like git-prune(1). You
           should not need to set it yourself unless you want to be paranoid about making sure an
           operation has touched every ref (e.g., because you are cloning a repository to make a
           backup).

       GIT_ALLOW_PROTOCOL
           If set to a colon-separated list of protocols, behave as if protocol.allow is set to
           never, and each of the listed protocols has protocol.<name>.allow set to always
           (overriding any existing configuration). In other words, any protocol not mentioned
           will be disallowed (i.e., this is a whitelist, not a blacklist). See the description
           of protocol.allow in git-config(1) for more details.

       GIT_PROTOCOL_FROM_USER
           Set to 0 to prevent protocols used by fetch/push/clone which are configured to the
           user state. This is useful to restrict recursive submodule initialization from an
           untrusted repository or for programs which feed potentially-untrusted URLS to git
           commands. See git-config(1) for more details.

       GIT_PROTOCOL
           For internal use only. Used in handshaking the wire protocol. Contains a colon :
           separated list of keys with optional values key[=value]. Presence of unknown keys and
           values must be ignored.

       GIT_OPTIONAL_LOCKS
           If set to 0, Git will complete any requested operation without performing any optional
           sub-operations that require taking a lock. For example, this will prevent git status
           from refreshing the index as a side effect. This is useful for processes running in
           the background which do not want to cause lock contention with other operations on the
           repository. Defaults to 1.

       GIT_REDIRECT_STDIN, GIT_REDIRECT_STDOUT, GIT_REDIRECT_STDERR
           Windows-only: allow redirecting the standard input/output/error handles to paths
           specified by the environment variables. This is particularly useful in multi-threaded
           applications where the canonical way to pass standard handles via CreateProcess() is
           not an option because it would require the handles to be marked inheritable (and
           consequently every spawned process would inherit them, possibly blocking regular Git
           operations). The primary intended use case is to use named pipes for communication
           (e.g.  \\.\pipe\my-git-stdin-123).

           Two special values are supported: off will simply close the corresponding standard
           handle, and if GIT_REDIRECT_STDERR is 2>&1, standard error will be redirected to the
           same handle as standard output.

       GIT_PRINT_SHA1_ELLIPSIS (deprecated)
           If set to yes, print an ellipsis following an (abbreviated) SHA-1 value. This affects
           indications of detached HEADs (git-checkout(1)) and the raw diff output (git-diff(1)).
           Printing an ellipsis in the cases mentioned is no longer considered adequate and
           support for it is likely to be removed in the foreseeable future (along with the
           variable).

DISCUSSION
       More detail on the following is available from the Git concepts chapter of the
       user-manual[2] and gitcore-tutorial(7).

       A Git project normally consists of a working directory with a ".git" subdirectory at the
       top level. The .git directory contains, among other things, a compressed object database
       representing the complete history of the project, an "index" file which links that history
       to the current contents of the working tree, and named pointers into that history such as
       tags and branch heads.

       The object database contains objects of three main types: blobs, which hold file data;
       trees, which point to blobs and other trees to build up directory hierarchies; and
       commits, which each reference a single tree and some number of parent commits.

       The commit, equivalent to what other systems call a "changeset" or "version", represents a
       step in the project’s history, and each parent represents an immediately preceding step.
       Commits with more than one parent represent merges of independent lines of development.

       All objects are named by the SHA-1 hash of their contents, normally written as a string of
       40 hex digits. Such names are globally unique. The entire history leading up to a commit
       can be vouched for by signing just that commit. A fourth object type, the tag, is provided
       for this purpose.

       When first created, objects are stored in individual files, but for efficiency may later
       be compressed together into "pack files".

       Named pointers called refs mark interesting points in history. A ref may contain the SHA-1
       name of an object or the name of another ref. Refs with names beginning ref/head/ contain
       the SHA-1 name of the most recent commit (or "head") of a branch under development. SHA-1
       names of tags of interest are stored under ref/tags/. A special ref named HEAD contains
       the name of the currently checked-out branch.

       The index file is initialized with a list of all paths and, for each path, a blob object
       and a set of attributes. The blob object represents the contents of the file as of the
       head of the current branch. The attributes (last modified time, size, etc.) are taken from
       the corresponding file in the working tree. Subsequent changes to the working tree can be
       found by comparing these attributes. The index may be updated with new content, and new
       commits may be created from the content stored in the index.

       The index is also capable of storing multiple entries (called "stages") for a given
       pathname. These stages are used to hold the various unmerged version of a file when a
       merge is in progress.

FURTHER DOCUMENTATION
       See the references in the "description" section to get started using Git. The following is
       probably more detail than necessary for a first-time user.

       The Git concepts chapter of the user-manual[2] and gitcore-tutorial(7) both provide
       introductions to the underlying Git architecture.

       See gitworkflows(7) for an overview of recommended workflows.

       See also the howto[3] documents for some useful examples.

       The internals are documented in the Git API documentation[4].

       Users migrating from CVS may also want to read gitcvs-migration(7).

AUTHORS
       Git was started by Linus Torvalds, and is currently maintained by Junio C Hamano. Numerous
       contributions have come from the Git mailing list <git@vger.kernel.org[5]>.
       http://www.openhub.net/p/git/contributors/summary gives you a more complete list of
       contributors.

       If you have a clone of git.git itself, the output of git-shortlog(1) and git-blame(1) can
       show you the authors for specific parts of the project.

REPORTING BUGS
       Report bugs to the Git mailing list <git@vger.kernel.org[5]> where the development and
       maintenance is primarily done. You do not have to be subscribed to the list to send a
       message there.

       Issues which are security relevant should be disclosed privately to the Git Security
       mailing list <git-security@googlegroups.com[6]>.

SEE ALSO
       gittutorial(7), gittutorial-2(7), giteveryday(7), gitcvs-migration(7), gitglossary(7),
       gitcore-tutorial(7), gitcli(7), The Git User’s Manual[1], gitworkflows(7)

GIT
       Part of the git(1) suite

NOTES
        1. Git User’s Manual
           file:///usr/share/doc/git/html/user-manual.html

        2. Git concepts chapter of the user-manual
           file:///usr/share/doc/git/html/user-manual.html#git-concepts

        3. howto
           file:///usr/share/doc/git/html/howto-index.html

        4. Git API documentation
           file:///usr/share/doc/git/html/technical/api-index.html

        5. git@vger.kernel.org
           mailto:git@vger.kernel.org

        6. git-security@googlegroups.com
           mailto:git-security@googlegroups.com

Git 2.17.1                                  11/26/2018                                     GIT(1)
